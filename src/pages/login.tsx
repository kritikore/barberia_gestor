// src/pages/login.tsx

import { useState, FormEvent } from 'react';
import { NextPage } from 'next';
import { useRouter } from 'next/router'; // Para la redirecciÃ³n despuÃ©s del login
import styles from '../styles/Login.module.css'; // <--- ImportaciÃ³n del CSS Module

// Define las interfaces para asegurar que los datos del formulario son correctos
interface LoginFormState {
Â  email: string;
Â  password: string;
}

const LoginPage: NextPage = () => {
Â  // InicializaciÃ³n del hook de enrutamiento
Â  const router = useRouter();Â 
Â Â 
Â  // Estado del formulario y la UI
Â  const [formState, setFormState] = useState<LoginFormState>({
Â  Â  email: '',
Â  Â  password: '',
Â  });
Â  const [isLoading, setIsLoading] = useState(false);
Â  const [error, setError] = useState<string | null>(null);

Â  // Maneja los cambios en los inputs
Â  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
Â  Â  const { name, value } = e.target;
Â  Â  setFormState(prevState => ({
Â  Â  Â  ...prevState,
Â  Â  Â  [name]: value,
Â  Â  }));
Â  };

Â  // Maneja el envÃ­o del formulario y llama al API de Yovany
Â  const handleSubmit = async (e: FormEvent) => {
Â  Â  e.preventDefault();
Â  Â  setError(null);
Â  Â  setIsLoading(true);

Â  Â  // =========================================================
Â  Â  // âœ… LÃ“GICA DE ACCESO DE DESARROLLO (MANTENIDA TEMPORALMENTE)
Â  Â  // Usar 'dev@gestor.com' y 'access' para saltar el API fallido (404)
Â  Â  // =========================================================
Â  Â  if (formState.email === 'dev@gestor.com' && formState.password === 'access') {
Â  Â  Â  Â  console.log("Acceso de Desarrollo concedido. Redirigiendo a Inventario.");
Â  Â  Â  Â  // Redirige directamente al panel del Gestor (Inventario)
Â  Â  Â  Â  router.push('/inventario');Â 
Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  return; // Detiene la ejecuciÃ³n para no llamar al API
Â  Â  }
Â  Â  // =========================================================

Â  Â  try {
Â  Â  Â  // ----------------------------------------------------
Â  Â  Â  // LLAMADA A LA API DE AUTENTICACIÃ“N (ENDPOINT DE YOVANY)
Â  Â  Â  // ----------------------------------------------------
Â  Â  Â  const response = await fetch('/api/auth/login', {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  Â  Â  },
Â  Â  Â  Â  body: JSON.stringify(formState),
Â  Â  Â  });

Â  Â  Â  const data = await response.json();

Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  // Error 401: Credenciales invÃ¡lidas
Â  Â  Â  Â  throw new Error(data.message || 'Error de conexiÃ³n con el servidor.');
Â  Â  Â  }

Â  Â  Â  // Si es exitoso, redireccionar segÃºn el rol (Administrador o Barbero)
Â  Â  Â  if (data.user.role === 'admin') {
Â  Â  Â  Â  router.push('/dashboard'); // Redirigir al dashboard de administrador
Â  Â  Â  } else if (data.user.role === 'barbero') {
Â  Â  Â  Â  router.push('/barbero/bitacora'); // Redirigir a la vista de Barbero
Â  Â  Â  } else {
Â  Â  Â  Â  Â throw new Error('Rol de usuario no reconocido.');
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  } catch (err: any) {
Â  Â  Â  // Muestra el error de autenticaciÃ³n al usuario
Â  Â  Â  setError(err.message);
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };

Â  return (
Â  Â  // Usa la clase de contenedor principal para centrar
Â  Â  <div className={styles.loginContainer}>
Â  Â  Â  {/* Usa la clase de la caja para el estilo oscuro */}
Â  Â  Â  <div className={styles.loginBox}>
Â  Â  Â  Â Â 
Â  Â  Â  Â  <h1>ðŸ’ˆ BarberÃ­a Gestor</h1>
Â  Â  Â  Â  <h2>Panel de Control</h2>
Â  Â  Â  Â Â 
Â  Â  Â  Â  <form onSubmit={handleSubmit}>
Â  Â  Â  Â  Â  {/* Campo de Email/Usuario */}
Â  Â  Â  Â  Â  <div className={styles.formGroup}>
Â  Â  Â  Â  Â  Â  <label htmlFor="email">Usuario:</label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  className={styles.loginInput}
Â  Â  Â  Â  Â  Â  Â  id="email"
Â  Â  Â  Â  Â  Â  Â  name="email"
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="administrador o usuario"
Â  Â  Â  Â  Â  Â  Â  value={formState.email}
Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Campo de ContraseÃ±a */}
Â  Â  Â  Â  Â  <div className={styles.formGroup}>
Â  Â  Â  Â  Â  Â  <label htmlFor="password">ContraseÃ±a:</label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  className={styles.loginInput}
Â  Â  Â  Â  Â  Â  Â  id="password"
Â  Â  Â  Â  Â  Â  Â  name="password"
Â  Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  Â  placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
Â  Â  Â  Â  Â  Â  Â  value={formState.password}
Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Mensaje de Error */}
Â  Â  Â  Â  Â  {error && <p className={styles.errorMessage}>{error}</p>}

Â  Â  Â  Â  Â  {/* BotÃ³n de Enviar */}
Â  Â  Â  Â  Â  <buttonÂ 
Â  Â  Â  Â  Â  Â  type="submit"Â 
Â  Â  Â  Â  Â  Â  className={styles.loginButton}Â 
Â  Â  Â  Â  Â  Â  disabled={isLoading || !formState.email || !formState.password} // Deshabilita si estÃ¡ cargando o campos vacÃ­os
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {isLoading ? 'Accediendo...' : 'Acceder'}
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </form>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default LoginPage;